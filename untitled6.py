# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ur64TwitspMi1ruJOMqqji9InkAf534m
"""

import streamlit as st
import pandas as pd
import fitz  # PyMuPDF for PDFs
import google.generativeai as genai
from docx import Document
import io

# Configure Gemini API
genai.configure(api_key="AIzaSyCTZUKNEwJFDgbyWNRSrYLRxs8XvLNO4n4")  # Replace with your actual API key

st.title("KVA AI BOT")

# Upload Files
uploaded_csv = st.file_uploader("Upload Project Database (CSV)", type=["csv"])
uploaded_cv = st.file_uploader("Upload CVs (PDF)", type=["pdf"])
uploaded_old_proposal = st.file_uploader("Upload Old Proposal (PDF)", type=["pdf"])

if uploaded_csv and uploaded_cv and uploaded_old_proposal:
    # Read CSV file
    project_df = pd.read_csv(uploaded_csv)

    def extract_text_from_pdf(uploaded_file):
        """Extract text from an uploaded PDF file"""
        text = ""
        pdf_bytes = uploaded_file.read()  # Read as bytes
        pdf_stream = io.BytesIO(pdf_bytes)  # Convert to a file-like object
        with fitz.open("pdf", pdf_stream) as doc:
            for page in doc:
                text += page.get_text("text") + "\n"
        return text

    # Extract text from uploaded PDFs
    cv_text = extract_text_from_pdf(uploaded_cv)
    old_proposal_text = extract_text_from_pdf(uploaded_old_proposal)

    # User input for project name
    project_name = st.text_input("Enter Project Name")

    if st.button("Generate Proposal"):
        if not project_name:
            st.error("Please enter a project name.")
        else:
            project_info = project_df[project_df['Project Name'].str.contains(project_name, case=False, na=False)]

            if project_info.empty:
                st.error("Project not found in database.")
            else:
                project_details = project_info.to_dict(orient='records')[0]

                prompt = f"""
                Based on the old proposal:
                {old_proposal_text}

                And the project details:
                {project_details}

                And the CVs:
                {cv_text}

                Generate a new tender proposal following the format of the old proposal.
                """

                # Select a valid model
                model = genai.GenerativeModel("gemini-1.5-flash")  # Change if needed

                try:
                    response = model.generate_content(prompt)
                    proposal_text = response.text

                    # Save the generated proposal to a Word document
                    doc = Document()
                    for para in proposal_text.split("\n"):
                        doc.add_paragraph(para)

                    # Convert the document to bytes for download
                    doc_bytes = io.BytesIO()
                    doc.save(doc_bytes)
                    doc_bytes.seek(0)

                    st.success("Proposal generated successfully! Download it below:")
                    st.download_button(
                        label="Download Proposal",
                        data=doc_bytes,
                        file_name="Generated_Proposal.docx",
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                    )
                except Exception as e:
                    st.error(f"Error generating proposal: {str(e)}")